---
layout: post
title:  projects
date:   2021-06-14 20:26:44 +0200
categories: jekyll update
---

<style type="text/css">
  .tag:visited, .tag {
    border: 1px solid #3b8fff;;
    border-radius: 6px;
    padding: 3px 5px 2px;
    color: #fff;
    background-color: #1756a9;
    font-size: small;
  }
  .tag:hover{
      color: #eee;
      text-decoration: none;
  }
  
</style>

## Image Classification without Gradient Descent

[![](https://raw.githubusercontent.com/lochbrunner/hippocampus/master/docs/mnist.gif)](https://raw.githubusercontent.com/lochbrunner/hippocampus/master/docs/mnist.gif)

Inspired by the Hippocampus of the human brain, this small project tries to learn to classify images similarly.
The neurons in our brain create connections when they frequently fire synchronously.
These connections may lead to the fact that when one of these neurons gets stimulated, all the other connected neurons may be stimulated as well.

The approach in this project works as follow:
1. Create a deep CNN network with randomly initialed weights.
2. Feed in the training samples and store the index of the neurons with the strongest activation per class. (One-shot learning)
3. To predict a class, calculate the connection group of the neurons that fires most.

View the code on [github](https://github.com/lochbrunner/hippocampus).

<a class="tag" href="https://pytorch.org">PyTorch</a>
<a class="tag" href="https://www.python.org">Python</a>
<br/><br/>

## Editor for Neural Network Architectures

An online platform for designing, training and sharing AI models.

[![](https://raw.githubusercontent.com/lochbrunner/open-go-bot/master/docs/assets/mnist/mnist.gif)](https://raw.githubusercontent.com/lochbrunner/open-go-bot/master/docs/assets/mnist/mnist.gif)

The user can design the network architecture without any code, just in the editor.
When painting on the canvas, the hidden neuron states are displayed live.

Try it at [lochbrunner.github.io/demos/social-ai](https://lochbrunner.github.io/demos/social-ai/#/scenario/mnist).

View the code on [github](https://github.com/lochbrunner/open-go-bot).


<a class="tag" href="https://www.typescriptlang.org">Typescript</a>
<a class="tag" href="https://reactjs.org">React</a>
<a class="tag" href="https://redux.js.org">Redux</a>
<a class="tag" href="https://www.tensorflow.org/js">TensorFlow.js</a>
<br/><br/>

## Present IO

Online SVG Editor with the potential to host your presentations.

[![](https://raw.githubusercontent.com/lochbrunner/present.io/master/docs/present-io-screenshot.png)](https://raw.githubusercontent.com/lochbrunner/present.io/master/docs/present-io-screenshot.png)

This project is currently a simple and easy-to-use SVG editor which runs totally in the browser.
SVG is a very flexible image format with all high-level features one can wish. Therefore, it is not a big challenge to create an interactive UI using Material UI and Redux.
Later, animation features will be added to create excellent presentations without installing any software on your local machines.

Try it at [lochbrunner.github.io/present.io](https://lochbrunner.github.io/present.io)

View the code on [github](https://github.com/lochbrunner/present.io).

<a class="tag" href="https://www.typescriptlang.org">Typescript</a>
<a class="tag" href="https://reactjs.org">React</a>
<a class="tag" href="https://redux.js.org">Redux</a>
<a class="tag" href="https://material-ui.com">Material UI</a>
<br/><br/>

## Graph Extension for VS Code

An extension to display directed interactive graphs directly in VS Code.

<iframe width="784" height="441" src="https://www.youtube.com/embed/TJ5P_vkUihw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

For a private project, the massive amount of graphs is stored in a binary file.
As the core elements in that project are written in Rust, the binary can only be loaded by a rust module.
This extension uses Javascript bindings to load the file and stores an index of the graph in an SQLite database.
Following a master-detail architecture, with an infinity scroll, the user can easily query specific graphs and visualize them just in VS Code by right-clicking on the file.

<a class="tag" href="https://www.typescriptlang.org">Typescript</a>
<a class="tag" href="https://www.rust-lang.org/">Rust</a>
<a class="tag" href="https://www.sqlite.org/index.html">sqlite</a>
<br/><br/>

## Charlie Debugger

This project contains a compiler, interpreter, and debug adapter for VS Code of the programming language Charlie, a subset of C.

<iframe width="784" height="441" src="https://www.youtube.com/embed/bC8TMuqG-oE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

For the sake of learning, all components are written from scratch without any third-party libraries. (Except the VS Code extension)
The compiler parses the source code and dumps the corresponding byte-code.
The interpreter reading that byte-code can launch a TCP socket to which the VS Code debugging extension can connect. 

View the code on [github](https://github.com/lochbrunner/charlie)

<a class="tag" href="https://www.typescriptlang.org">Typescript</a>
<a class="tag" href="https://en.wikipedia.org/wiki/C%2B%2B">C++</a>
<br/><br/>

## Former Projects (before 2015)

<iframe width="784" height="441" src="https://www.youtube.com/embed/wWIqVlIU-r8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


### Soccer Playing Robot

After playing around with Java, the first serious project I joined was a soccer-playing robot.
Our team built up the hardware and software.
We fused the input of different sensors as ultrasonic, IR sensor and others.

<a class="tag" href="https://en.wikipedia.org/wiki/C%2B%2B">C++</a>

### Interactive 3D Physics Simulation

The propaedeutic project during school was an interactive physics simulation capable of simulating elemental electromagnetic forces.
A challenging part was the manipulator, which allows the user to edit all objects in the 3D scene.

<a class="tag" href="https://en.wikipedia.org/wiki/C%2B%2B">C++</a>
<a class="tag" href="https://docs.microsoft.com/en-us/windows/win32/direct3d">Direct3d</a>
<a class="tag" href="https://docs.microsoft.com/en-us/windows/win32/apiindex/windows-api-list">Win32 API</a>

### 3D Modeling Tool and Ray-Tracer

Inspired by the 3d modeling tool Maya and its render engine, this project let the user create and manipulate polygons.
Animations were calculated with the scripting engine of Lua.
A ray-tracer was able to load the files and render the scenes.
Because of the lack of internet, the only third-party library was for loading XML files.

<a class="tag" href="https://en.wikipedia.org/wiki/C%2B%2B">C++</a>
<a class="tag" href="https://www.opengl.org">OpenGL</a>
<a class="tag" href="https://www.lua.org/">Lua</a>
<a class="tag" href="https://www.qt.io">Qt</a>

### Physical Simulation using CUDA

In the study, I utilized the GPU in order to calculate physical fields in a larger scale. 

<a class="tag" href="https://developer.nvidia.com/cuda-zone">CUDA</a>
<a class="tag" href="https://en.wikipedia.org/wiki/C%2B%2B">C++</a>
<a class="tag" href="https://www.opengl.org">OpenGL</a>

### Platform for Semantic Knowledge Management

Starting with a small algorithm that found solutions in propositional calculus, I build an online platform where users can store their latex documents.
Besides a live LaTeX editor, there were some additional LaTeX commands to structure the document's semantic.
With this, a semantic linkage between documents was possible. 

<a class="tag" href="https://www.typescriptlang.org">Typescript</a>
<a class="tag" href="https://reactjs.org">React</a>
<a class="tag" href="https://angular.io/">Angular</a>
<a class="tag" href="https://docs.microsoft.com/en-us/dotnet/csharp">C#</a>
<a class="tag" href="https://dotnet.microsoft.com/apps/aspnet">asp.net</a>

### Technologies used in other Projects

Several other projects are not listed here.

<a class="tag" href="https://github.com/google/jax">JAX</a>
<a class="tag" href="https://www.java.com">Java</a>
<a class="tag" href="https://en.wikipedia.org/wiki/Prolog">Prolog</a>
<a class="tag" href="https://www.lua.org">Lua</a>
<a class="tag" href="https://golang.org">Go</a>
<a class="tag" href="https://www.blender.org">Blender</a>
<a class="tag" href="https://www.autodesk.com/products/maya/overview">Maya</a>
<a class="tag" href="https://www.mathworks.com/products/matlab.html">Matlab</a>
<a class="tag" href="https://fortran-lang.org">Fortran</a>
<a class="tag" href="https://www.wolfram.com/mathematica">Mathematica</a>
